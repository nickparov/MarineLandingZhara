!function(n){var t={};function e(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=n,e.c=t,e.d=function(n,t,o){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:o})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var r in n)e.d(o,r,function(t){return n[t]}.bind(null,r));return o},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=0)}([function(n,t,e){"use strict";e.r(t);var o,r,a=function(){var n={isOpened:!1},t={ModalContent:"#ModalContent",ModalContainer:".modal_container",CloseModalBtn:".closeModalBtn",ModalTitle:"#modalTitle",ModalBtns:"#ModalBtns"};function e(t){n.isOpened=t}function o(){$(t.ModalTitle).html(""),$(t.ModalContent).html(""),$(t.ModalBtns).html("")}function r(n){$("body").css({height:"auto",overflow:"visible"}),$(t.ModalContainer).fadeOut(700,(function(){e(!1),"function"==typeof n&&n()}))}return $(t.ModalContainer).hide(),$("body").on("click",t.CloseModalBtn,(function(){r(o)})),{hide:r,show:function(n){$("body").css({height:"100%",overflow:"hidden"}),$(t.ModalContainer).fadeIn(700,(function(){e(!0),"function"==typeof n&&n()}))},clearModal:o,populateModal:function(n,e,o){$(t.ModalTitle).html(n),$(t.ModalContent).html(e),$(t.ModalBtns).html(o)},getSelectors:function(){return t},hideAndClear:function(){$(t.ModalContainer).fadeOut(700,(function(){e(!1),o()}))},addAlert:function(n,e,o){void 0===n&&(n="warning"),void 0===e&&(e=""),void 0===o&&(o="");var r='\n      <div class="alert alert-'+n+' alert-dismissible fade show" role="alert">\n        <strong>'+e+"</strong> "+o+'\n        <button type="button" class="close" data-dismiss="alert" aria-label="Close">\n          <span aria-hidden="true">&times;</span>\n        </button>\n      </div>\n    ';$(t.ModalContent).prepend(r)}}}(),i=function(){var n=!0;function t(){$("#loader_wrapper").fadeIn("slow")}function e(){$("#loader_wrapper").fadeOut("slow")}function o(){return n}function r(t){n=t}return{getPageLoadingStatus:o,setPageLoadingStatus:r,toggleReload:function(){var n=o();!0===n?e():t(),r(!n)},simulateReloading:function(n,o){t(),setTimeout((function(){if("function"==typeof n&&void 0!==typeof o){var t=Array.prototype.slice.call(arguments,2);n.apply(o,t)}else"function"==typeof n&&void 0!==typeof o&&n.call(o);e()}),800)},showLoader:t,hideLoader:e}}(),l=(o=".event-button",r={OpenChat:function(n){},SendRequest:function(n){a.populateModal("Send Request!",'<input placeholder="Your message" name="message" class="form-control"/>','<button class="btn btn-large btn-outline-primary">Send</button>'),a.show()}},{start:function(){$(o).on("click",(function(n){n.preventDefault();var t=$(n.target).data("eventhandler");if(!r.hasOwnProperty(t))throw new Error("No such eventFuncIndentifier prop on EventHandler obj! Wrong one provided!");r[t]()})),setTimeout((function(){i.hideLoader()}),1500)}});jQuery(document).ready((function(){return l.start()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,